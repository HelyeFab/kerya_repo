rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Constants for stat limits
    function MAX_STREAK() { return 365; }  // Maximum 1 year streak
    function MAX_BOOKS_READ() { return 10000; }  // Reasonable limit for books
    function MAX_FAVORITES() { return 1000; }  // Reasonable limit for favorites
    function MAX_SAVED_WORDS() { return 10000; }  // Reasonable limit for vocabulary

    // Helper function to check time difference in days
    function getDayDifference(date1, date2) {
      let oneDayInMs = 24 * 60 * 60 * 1000;
      return (date2.toMillis() - date1.toMillis()) / oneDayInMs;
    }

    // Helper function to validate book progress data
    function hasValidBookProgressFields(data) {
      return data.keys().hasAll(['currentPage', 'isCompleted', 'currentLanguage', 'lastReadAt']) &&
             data.currentPage is number &&
             data.currentPage >= 0 &&
             data.isCompleted is bool &&
             data.currentLanguage is string &&
             (data.lastReadAt == null || data.lastReadAt is timestamp);
    }

    // Helper function to validate book progress update
    function isValidBookProgressUpdate(data, bookData) {
      let totalPages = bookData.pages.size();
      return data.currentPage <= totalPages &&
             data.isCompleted == (data.currentPage >= totalPages - 1) &&
             (data.lastReadAt == null || data.lastReadAt is timestamp);
    }

    // Helper function to validate book metadata
    function hasValidBookFields(data) {
      return data.keys().hasAll(['title', 'pages', 'defaultLanguage']) &&
             data.title is map &&
             data.pages is list &&
             data.defaultLanguage is string;
    }

    // Helper function to validate initial stats
    function hasValidInitialStats(data) {
      return data.keys().hasAll([
               'booksRead', 'favoriteBooks', 'readingStreak', 
               'savedWords', 'lastUpdated', 'lastBookId'
             ]) &&
             data.booksRead == 0 &&
             data.favoriteBooks == 0 &&
             data.readingStreak == 0 &&
             data.savedWords == 0 &&
             data.lastBookId == null;
    }

    // Helper function to validate stats fields
    function hasValidStatsFields(data) {
      return data.keys().hasAll([
               'booksRead', 'favoriteBooks', 'readingStreak', 
               'savedWords', 'lastUpdated', 'lastBookId'
             ]) &&
             data.booksRead is number && 
             data.booksRead >= 0 && 
             data.booksRead <= MAX_BOOKS_READ() &&
             data.favoriteBooks is number && 
             data.favoriteBooks >= 0 && 
             data.favoriteBooks <= MAX_FAVORITES() &&
             data.readingStreak is number && 
             data.readingStreak >= 0 && 
             data.readingStreak <= MAX_STREAK() &&
             data.savedWords is number && 
             data.savedWords >= 0 && 
             data.savedWords <= MAX_SAVED_WORDS() &&
             data.lastUpdated is timestamp &&
             (data.lastBookId == null || data.lastBookId is string);
    }

    // Root level books collection
    match /books/{bookId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.token.admin == true;
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      
      match /stats/{statsId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == userId;
        allow update: if isAuthenticated() && request.auth.uid == userId;
      }
      
      match /books/{bookId} {
        allow read: if isAuthenticated() && request.auth.uid == userId;
        allow create: if isAuthenticated() && 
                     request.auth.uid == userId && 
                     hasValidBookProgressFields(request.resource.data);
        allow update: if isAuthenticated() && 
                     request.auth.uid == userId && 
                     hasValidBookProgressFields(request.resource.data) &&
                     isValidBookProgressUpdate(request.resource.data, get(/databases/$(database)/documents/books/$(bookId)).data);
      }
      
      match /favorites/{bookId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
                     request.auth.uid == userId &&
                     get(/databases/$(database)/documents/users/$(userId)/stats/current).data.favoriteBooks < MAX_FAVORITES();
        allow delete: if isAuthenticated() && request.auth.uid == userId;
      }

      match /saved_words/{wordId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
                     request.auth.uid == userId &&
                     get(/databases/$(database)/documents/users/$(userId)/stats/current).data.savedWords < MAX_SAVED_WORDS();
        allow delete: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    match /books/{bookId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                  request.auth.token.admin == true && 
                  hasValidBookFields(request.resource.data);
    }
  }
}
